$primary: #000;
$secondary: #888;
$bg: #f4f6ff;
$accent: #8d99ae;
$tread: #ef233c;
$nav: $bg;


particles js :


// setting canvas
const canvas = document.querySelector('#canvas');
const ctx = canvas.getContext('2d');

canvas.width = window.innerWidth;
canvas.height = window.innerHeight;

let particaleArray = [];

// setting the mouse properties
let mouse = {
    x: null,
    y: null,
    radius: (canvas.width / 80) * (canvas.height / 80)
};

window.addEventListener('mousemove', e => {
    mouse.x = e.x;
    mouse.y = e.y;

});

// particle calss:

class Particle {
    constructor (x, y, directionX, directionY, size, color) {
        this.x = x;
        this.y = y;
        this.directionX = directionX;
        this.directionY = directionY;
        this.size = size;
        this.color = color;
    }

    // method to draw individual particle
    draw () {
        ctx.beginPath();
        ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2, false);
        ctx.fillStyle = '#555444';
        ctx.fill();
    }

    // updateing the particle according to mouse movement
    update () {
        // check if the particle is still within the canvas, if not reverse the direction
        if (this.x > canvas.width || this.x < 0) {
            this.directionX = -this.directionX;
        }

        if (this.y > canvas.height || this.y < 0) {
            this.directionY = -this.directionY;
        }

        // collision detection / mouse and particle detection
        let dx = mouse.x - this.x;
        let dy = mouse.y - this.y;
        let distance = Math.sqrt( dx**2 + dy**2 );
        if (distance < mouse.radius + this.size) {
            if (mouse.x < this.x && this.x < canvas.width - this.size * 10) {
                this.x += 10;
            }
            if (mouse.x > this.x && this.x > this.size * 10) {
                this.x -= 10;
            }
            if (mouse.y < this.y && this.y < canvas.height - this.size * 10) {
                this.y += 10;
            }
            if (mouse.y > this.y && this.y > this.size * 10) {
                this.y -= 10;
            }
        }

        // move particle
        this.x += this.directionX;
        this.y += this.directionY;

        // draw
        this.draw();

    }
}

// creating particle arrays
function init () {
    particaleArray = [];
    const numberOfParticle = 100;
    for (let i = 0 ; i < numberOfParticle; i++) {
        const size = (Math.random() * 5) + 1;
        const x = (Math.random() * ((canvas.innerWidth - size * 2) - (size * 2)) + size * 2);
        const y = (Math.random() * ((canvas.innerHeight - size * 2) - (size * 2)) + size * 2);
        const directionX = (Math.random() * 5) - 2.5;
        const directionY = (Math.random() * 5) - 2.5;
        const color = '#ff0000';

        particaleArray.push(new Particle(x, y , directionX, directionY, size, color));
    }
}

// animate loop
function animate() {
    requestAnimationFrame(animate);
    ctx.clearRec(0, 0, canvas.width, canvas.height);

    // updating and drawing all particles
    for (let i = 0 ; i < particaleArray.length; i++) {
        particaleArray[i].update();
    }
}

init();
animate();

